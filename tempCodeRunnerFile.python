from itertools import permutations

def TokenNumbering(N, P, A, B):
    # Initialize the result to -404
    result = -404

    # Generate all permutations of the token indices
    indices = list(range(N))
    all_permutations = permutations(indices)

    # Initialize the probability result to 0
    probability_result = 0.0

    # Iterate over all permutations to calculate the probability
    for perm in all_permutations:
        prob = 1.0
        used_numbers = set()
        valid_permutation = True

        for i in perm:
            if A[i] in used_numbers and B[i] in used_numbers:
                valid_permutation = False
                break
            elif A[i] in used_numbers:
                prob *= (100 - P[i]) / 100.0
                used_numbers.add(B[i])
            elif B[i] in used_numbers:
                prob *= P[i] / 100.0
                used_numbers.add(A[i])
            else:
                prob *= (P[i] / 100.0 + (100 - P[i]) / 100.0)
                used_numbers.add(A[i])
                used_numbers.add(B[i])

        if valid_permutation:
            probability_result += prob

    # Divide by the number of permutations to get the average probability
    probability_result /= len(list(permutations(indices)))

    # Update the result with the calculated probability
    result = probability_result

    return result

# Input data
N = 2
P = [50, 50]
A = [1, 2]
B = [2, 1]

# Function call and output
result = TokenNumbering(N, P, A, B)
print(f"{result:.9f}")